[{"D:\\data1\\MERNblog\\frontend\\src\\index.js":"1","D:\\data1\\MERNblog\\frontend\\src\\reportWebVitals.js":"2","D:\\data1\\MERNblog\\frontend\\src\\App.js":"3","D:\\data1\\MERNblog\\frontend\\src\\components\\Home.js":"4","D:\\data1\\MERNblog\\frontend\\src\\components\\Signup.js":"5","D:\\data1\\MERNblog\\frontend\\src\\components\\Login.js":"6","D:\\data1\\MERNblog\\frontend\\src\\components\\Navbar.js":"7","D:\\data1\\MERNblog\\frontend\\src\\redux\\index.js":"8","D:\\data1\\MERNblog\\frontend\\src\\redux\\reducers\\AuthReducer.js":"9","D:\\data1\\MERNblog\\frontend\\src\\redux\\store.js":"10","D:\\data1\\MERNblog\\frontend\\src\\redux\\actions\\actionTypes.js":"11","D:\\data1\\MERNblog\\frontend\\src\\redux\\actions\\AuthAction.js":"12","D:\\data1\\MERNblog\\frontend\\src\\redux\\actions\\Actiontypes.js":"13","D:\\data1\\MERNblog\\frontend\\src\\components\\Notfound.js":"14","D:\\data1\\MERNblog\\frontend\\src\\components\\Footer.js":"15","D:\\data1\\MERNblog\\frontend\\src\\components\\CreatePost.js":"16","D:\\data1\\MERNblog\\frontend\\src\\redux\\reducers\\PostReducer.js":"17","D:\\data1\\MERNblog\\frontend\\src\\redux\\actions\\PostTypes.js":"18","D:\\data1\\MERNblog\\frontend\\src\\redux\\actions\\PostAction.js":"19","D:\\data1\\MERNblog\\frontend\\src\\components\\MyPosts.js":"20","D:\\data1\\MERNblog\\frontend\\src\\components\\showPost.js":"21"},{"size":288,"mtime":1616604336399,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"23"},{"size":1131,"mtime":1616171981484,"results":"25","hashOfConfig":"23"},{"size":3198,"mtime":1616398506911,"results":"26","hashOfConfig":"23"},{"size":3354,"mtime":1616395910455,"results":"27","hashOfConfig":"23"},{"size":2922,"mtime":1616398344916,"results":"28","hashOfConfig":"23"},{"size":1854,"mtime":1616604726781,"results":"29","hashOfConfig":"23"},{"size":333,"mtime":1616211849756,"results":"30","hashOfConfig":"23"},{"size":2583,"mtime":1616398270184,"results":"31","hashOfConfig":"23"},{"size":522,"mtime":1615526754060,"results":"32","hashOfConfig":"23"},{"size":117,"mtime":1614848897097,"results":"33","hashOfConfig":"23"},{"size":2286,"mtime":1615198100738,"results":"34","hashOfConfig":"23"},{"size":404,"mtime":1616398232824,"results":"35","hashOfConfig":"23"},{"size":499,"mtime":1615195038477,"results":"36","hashOfConfig":"23"},{"size":472,"mtime":1616604878902,"results":"37","hashOfConfig":"23"},{"size":6807,"mtime":1616397436849,"results":"38","hashOfConfig":"23"},{"size":2287,"mtime":1616398170598,"results":"39","hashOfConfig":"23"},{"size":516,"mtime":1616398175360,"results":"40","hashOfConfig":"23"},{"size":4631,"mtime":1616212263800,"results":"41","hashOfConfig":"23"},{"size":3375,"mtime":1616252655919,"results":"42","hashOfConfig":"23"},{"size":1666,"mtime":1616397230846,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bd1piq",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"48"},"D:\\data1\\MERNblog\\frontend\\src\\index.js",[],"D:\\data1\\MERNblog\\frontend\\src\\reportWebVitals.js",[],["92","93"],"D:\\data1\\MERNblog\\frontend\\src\\App.js",[],"D:\\data1\\MERNblog\\frontend\\src\\components\\Home.js",["94","95","96","97","98","99","100"],"import {useSelector,useDispatch} from 'react-redux';\r\nimport {Helmet} from 'react-helmet'\r\nimport React, { useEffect,useState} from \"react\";\r\nimport Footer from './Footer';\r\nimport {allposts} from '../redux';\r\nimport { Card,Button} from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUser,faEye } from '@fortawesome/free-solid-svg-icons'\r\nimport moment from 'moment';\r\nimport {Link} from 'react-router-dom';\r\nimport toast,{Toaster} from 'react-hot-toast';\r\nimport {REMOVE_LOGINSUCCESS} from '../redux/actions/Actiontypes';\r\n\r\nimport \"./style.css\"\r\n\r\n\r\n\r\nconst renderdata=(allpost)=>{\r\n \r\n\r\n\r\n \r\n    return ( \r\n      allpost.map((post)=>(\r\n        <>\r\n        <Link to={\"/showpost/\" + post.slug} params={{ slug: post.slug }} style={{textDecoration:'none',color:'inherit'}} >\r\n        <Card style={{ width: '50%',margin: '30px',cursor:'pointer'}} className=\"mx-auto\" >\r\n\r\n<Card.Img variant=\"top\" src={process.env.PUBLIC_URL + `/images/${post.image}` } style={{height: '350px'}} alt=\"mypic\" />\r\n<Card.Body>\r\n<Card.Title >\r\n\r\n<span style={{color:'silver'}}>Published {moment(post.updatedAt).fromNow()}</span><br/>\r\n<span style={{color:'silver'}}>By {post.username} <FontAwesomeIcon icon={faUser} /></span>\r\n<br/><b><h1 style={{fontFamily: 'Noto Sans KR sans-serif'}} >{post.title}</h1></b>\r\n</Card.Title>\r\n\r\n<Card.Text>\r\n\r\n\r\n</Card.Text>\r\n\r\n\r\n\r\n</Card.Body>\r\n</Card>\r\n</Link>\r\n</>   \r\n      )         \r\n))\r\n\r\n}\r\n\r\nexport default function Home(){\r\n    \r\n  const {user,loginsuccess}=useSelector(state=>state.AuthReducer);\r\n const {allpost} = useSelector(state=>state.PostReducer);\r\n  const dispatch = useDispatch();\r\n  //dispatch(allposts());\r\n   \r\n  //console.log(\"all posts are\",allpost)\r\n  const [currentPage,setcurrentPage]=useState(1);\r\n    const [itemsPerPage,setitemsPerPage]=useState(3);\r\n\r\n    const handleclick=(event)=>{\r\n      setcurrentPage(Number(event.target.id));\r\n    }\r\n    const pages=[];\r\n    for(let i=1;i<=Math.ceil(allpost.length/itemsPerPage);i++){\r\n        pages.push(i);\r\n\r\n    }\r\n    const renderPage=pages.map(number=>{\r\n        return (\r\n            <li key={number} id={number} onClick={handleclick} className={currentPage == number ? \"active\" : null} >{number}</li>\r\n        )\r\n    })\r\n  const indexOfLastItem=currentPage*itemsPerPage;\r\n  const indexOfFirstItem=indexOfLastItem-itemsPerPage;\r\n  const currentItems=allpost.slice(indexOfFirstItem,indexOfLastItem);\r\n\r\n useEffect(()=>{\r\n   dispatch(allposts());\r\n },[])\r\n \r\n useEffect(()=>{\r\n   if(loginsuccess)\r\n   { \r\n    toast.success(loginsuccess) \r\n    dispatch({type:'REMOVE_LOGINSUCCESS'})\r\n   }\r\n },[])\r\n\r\n \r\nconst title=user ?      <Helmet>\r\n<meta charSet=\"utf-8\" />\r\n<title>Blog-Home</title>\r\n</Helmet> :     <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>Blog</title>\r\n            </Helmet>;\r\n    return (\r\n      <>\r\n   \r\n        <div>\r\n        <br/>\r\n        <Toaster/>\r\n    \r\n\r\n    { allpost.length>0 ?  renderdata(currentItems) : <h3 style={{margin:'auto'}} ><i>No posts to show</i></h3>}\r\n            \r\n    <div className=\"pageNumbers\"> {renderPage}</div>\r\n        </div>\r\n        <br></br>\r\n        <Footer/>\r\n        </>\r\n    )\r\n}\r\n","D:\\data1\\MERNblog\\frontend\\src\\components\\Signup.js",[],"D:\\data1\\MERNblog\\frontend\\src\\components\\Login.js",["101"],"import {Form,Button,Container, Row, Col, Alert, ListGroup } from 'react-bootstrap'\r\nimport logo from '../logo.png'\r\nimport {useState,useEffect} from 'react';\r\nimport {useDispatch,useSelector} from 'react-redux';\r\nimport { login } from '../redux'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {Helmet} from 'react-helmet'\r\nimport Footer from './Footer';\r\nimport toast,{Toaster} from 'react-hot-toast';\r\nimport {REMOVE_SIGNSUCCESS} from '../redux/actions/Actiontypes';\r\n\r\n\r\nexport default function Login(props){\r\n  const [state,setState]=useState({\r\n    \r\n    email:'',\r\n    password:''\r\n  });\r\n      \r\n  const dispatch = useDispatch();\r\n  const onchange=(e)=>{\r\n    setState({\r\n      ...state,\r\n      [e.target.name]:e.target.value\r\n\r\n    });\r\n  }\r\n  const {loading,loginError,loginsuccess,user,signsuccess}=useSelector(state=>state.AuthReducer);\r\n\r\n  useEffect(()=>{\r\n    if(signsuccess)\r\n    {\r\n      \r\n          toast.success(signsuccess) \r\n          dispatch({ type: REMOVE_SIGNSUCCESS})\r\n\r\n      \r\n    }\r\n  },[])\r\n  const loging=(e)=>{\r\n    e.preventDefault();\r\n    console.log(state);\r\n   dispatch(login(state));\r\n    \r\n  }\r\n  return (\r\n     <>\r\n\r\n      {user ? <Redirect to=\"/\" />:null }\r\n      {loading ? <div class=\"spinner-grow\" style={{width: \"8rem\",height: \"8rem\"}} role=\"status\"/> : null}\r\n\r\n      <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>LOGIN</title>\r\n            </Helmet>\r\n            <Toaster/>\r\n        <div className=\"container\">\r\n        <br/><br/>\r\n        <h1>Login</h1>\r\n        <Container fluid>\r\n                <Row>\r\n                    <Col xs={8} >\r\n                        <img src={logo} alt=\"mylogo\" style={{ height: \"100%\", width: \"100%\" }}></img>\r\n                    </Col>\r\n\r\n                    <Col >\r\n        <Form onSubmit={loging}>\r\n  <Form.Group controlId=\"formGroupEmail\">\r\n    <Form.Label>Email address</Form.Label>\r\n    <Form.Control type=\"email\" name=\"email\" onChange={onchange} value={state.email} placeholder=\"Enter email\" />\r\n  </Form.Group>\r\n  <Form.Group controlId=\"formGroupPassword\">\r\n    <Form.Label>Password</Form.Label>\r\n    <Form.Control type=\"password\"  onChange={onchange} name=\"password\" value={state.password} placeholder=\"Password\" />\r\n  </Form.Group>\r\n  <Button variant=\"warning\" type=\"submit\">\r\n  {loading ? \"Logging..\" :\"Login\" }\r\n  </Button>\r\n</Form>\r\n   <ListGroup style={{ marginTop: \"15px\" }}>\r\n      {  loginError ?\r\n          loginError.map((err,i) => (\r\n              <ListGroup.Item variant=\"danger\" key={i} style={{ borderLeft: \"3px solid #8c0000\" }}>{err.msg}</ListGroup.Item>\r\n          ))\r\n          : null\r\n      }\r\n    </ListGroup> \r\n\r\n{loginsuccess ? <Alert variant=\"success\" style={{ borderLeft: \"3px solid green\" }}>{loginsuccess}</Alert> : <> </>}\r\n\r\n\r\n</Col>\r\n                </Row>\r\n                \r\n            </Container>\r\n           \r\n        </div>\r\n        <Footer/>\r\n        </>\r\n    )\r\n}\r\n","D:\\data1\\MERNblog\\frontend\\src\\components\\Navbar.js",[],"D:\\data1\\MERNblog\\frontend\\src\\redux\\index.js",[],"D:\\data1\\MERNblog\\frontend\\src\\redux\\reducers\\AuthReducer.js",[],"D:\\data1\\MERNblog\\frontend\\src\\redux\\store.js",[],"D:\\data1\\MERNblog\\frontend\\src\\redux\\actions\\actionTypes.js",[],"D:\\data1\\MERNblog\\frontend\\src\\redux\\actions\\AuthAction.js",[],"D:\\data1\\MERNblog\\frontend\\src\\redux\\actions\\Actiontypes.js",[],"D:\\data1\\MERNblog\\frontend\\src\\components\\Notfound.js",[],"D:\\data1\\MERNblog\\frontend\\src\\components\\Footer.js",[],"D:\\data1\\MERNblog\\frontend\\src\\components\\CreatePost.js",["102","103","104"],"import {Form,Button,Container, Row, Col, Alert, ListGroup ,FormControl,Card} from 'react-bootstrap'\r\nimport {Helmet} from 'react-helmet'\r\nimport {useDispatch,useSelector} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom'\r\nimport React, { useState } from \"react\";\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport Footer from './Footer';\r\nimport { creating } from '../redux'\r\nexport default function CreatePost() {\r\n    const {user}=useSelector(state=>state.AuthReducer);\r\n    const {loading,post_error,post_success}=useSelector(state=>state.PostReducer);\r\n   \r\n    \r\n    //image state\r\n    const [image,setImage]=useState('Insert Image');\r\n    //image preview state\r\n    const [imagepreview,setpreview]=useState('');\r\n      //state for editor\r\n    const [value, setValue] = useState('');\r\n       //state for slug\r\n    const [slug,setSlug]=useState('');\r\n    //state for slug update button\r\n    const [slugbutton,setslugbutton] = useState(false);\r\n\r\n  //state for title\r\n  const [state,setState] =useState({\r\n    title:'',\r\n    description:'',\r\n    image:''\r\n  })\r\n    //getting image\r\n    const filechange=e=>{\r\n      //console.log(e.target.files[0].name);\r\n      if(e.target.files.length!==0)\r\n      {\r\n\r\n      setImage(e.target.files[0].name);\r\n\r\n      //setstate for image\r\n      setState({\r\n        ...state,\r\n        [e.target.name]:e.target.files[0]\r\n      })\r\n\r\n      //FileReader is use for reading data from file objects\r\n\r\n      const reader=new FileReader();\r\n      reader.onloadend=()=>{\r\n        setpreview(reader.result);\r\n      };\r\n      reader.readAsDataURL(e.target.files[0]);\r\n    }\r\n    };\r\n  \r\n\r\n  \r\n\r\n    //description onChange\r\n    const desOnchange=(e)=>{\r\n     \r\n      setState({\r\n        ...state,\r\n        [e.target.name]:e.target.value\r\n      })\r\n\r\n    }\r\n    \r\n\r\n//getting button while updating slug\r\nconst slugupdate=(e)=>{\r\n  setslugbutton(true);\r\n  setSlug(e.target.value);\r\n  //console.log('slug is:',slug);\r\n}\r\n\r\n//slug update button onclick\r\nconst slugonclick=(e)=>{\r\n  e.preventDefault();\r\n  setSlug(slug.trim().split(' ').join('-'));\r\n  //console.log('slug is',slug)\r\n}\r\n\r\n//this is for title while writing we will get slug\r\n    const onchange=(e)=>{\r\n      setState({\r\n        ...state,\r\n        [e.target.name]:e.target.value\r\n      });\r\n      const createslug=e.target.value.trim().split(' ').join('-');\r\n      setSlug(createslug);\r\n    }\r\n\r\n    const dispatch = useDispatch();\r\n    //on submit form \r\n   \r\n    const onsubmit=e=>{\r\n      e.preventDefault();\r\n     // console.log(state);\r\n  \r\n     const formdata=new FormData();\r\n     const {title,description,image}=state;\r\n     formdata.append('title',title);\r\n     formdata.append('description',description);\r\n     formdata.append('image',image);\r\n     formdata.append('slug',slug);\r\n     formdata.append('body',value);\r\n     formdata.append('username',user[0].uname);\r\n     formdata.append('userid',user[0]._id);\r\n\r\n     dispatch(creating(formdata));\r\n\r\n     // Display the key/value pairs\r\n// for (var pair of formdata.entries()) {\r\n//   console.log(pair[0]+ ', ' + pair[1]); \r\n// }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n        {user ? null :<Redirect to=\"/\" /> }\r\n\r\n        {post_success ? <Redirect to=\"/myposts\" /> : null}\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>Create Post</title>\r\n            </Helmet>\r\n            <Container fluid>\r\n            <Row>\r\n       \r\n            <Col xs={10} className=\"mx-auto\">\r\n            <Card style={{ marginTop:'30px'}}>\r\n \r\n  <Card.Body>\r\n    <Card.Title>CREATE NEW POST</Card.Title>\r\n    <Form onSubmit={onsubmit}>\r\n  <Row>\r\n  <Col>\r\n    \r\n    <Form.Group as={Row} controlId=\"formPlaintext\">\r\n    <Form.Label column sm=\"2\" >\r\n      Title\r\n    </Form.Label>\r\n    <Col sm=\"10\">\r\n      <Form.Control type=\"text\" onChange={onchange} value={state.value} placeholder=\"Enter Post Title\" name=\"title\" />\r\n    </Col>\r\n  </Form.Group>\r\n\r\n  <div className=\"custom-file\" style={{width:'70%',marginLeft:'35px',cursor:'pointer'}}>\r\n    <input\r\n      type=\"file\"\r\n      className=\"custom-file-input\"\r\n      id=\"inputGroupFile01\"\r\n      aria-describedby=\"inputGroupFileAddon01\"  onChange={filechange} name=\"image\"\r\n    />\r\n    <label className=\"custom-file-label\"  style={{backgroundColor: \"#E2E0EC\"}}htmlFor=\"inputGroupFile01\">\r\n      {image}\r\n    </label>\r\n  </div>\r\n\r\n<br/>\r\n<br/>\r\n<Form.Group as={Row} controlId=\"formPlaintext\">\r\n    <Form.Label column sm=\"2\">\r\n      Body\r\n    </Form.Label>\r\n    <Col sm=\"10\" >\r\n    <ReactQuill theme=\"snow\" value={value} onChange={setValue} placeholder=\"Post Body...\" />\r\n\r\n    </Col>\r\n  </Form.Group>\r\n \r\n \r\n\r\n</Col>\r\n<Col>\r\n\r\n<Form.Group as={Row} controlId=\"formPlaintext\">\r\n    <Form.Label column sm=\"2\" >\r\n     Post URL\r\n    </Form.Label>\r\n    <Col sm=\"10\">\r\n      <Form.Control type=\"text\" value={slug} onChange={slugupdate} placeholder=\"Post URL....\" name=\"slug\" />\r\n    </Col>\r\n  </Form.Group>\r\n\r\n  {slugbutton ? <Form.Group as={Row} controlId=\"formPlaintext\">\r\n  <Form.Label column sm=\"2\">\r\n\r\n  </Form.Label>\r\n  <Col sm=\"10\">\r\n  <Button variant=\"secondary\" style={{width: '100%'}} onClick={slugonclick} className=\"justify-content-lg-center\">Update Slug</Button>\r\n\r\n    </Col>\r\n\r\n  </Form.Group> : null}\r\n\r\n \r\n  {imagepreview ? \r\n  <Form.Group  as={Row}>\r\n  <Form.Label column sm=\"2\">\r\nImage Preview\r\n</Form.Label>\r\n <Col sm=\"10\">\r\n <img src={imagepreview} alt=\"image\" style={{width:'100%',height:'auto'}} />\r\n\r\n    </Col>\r\n\r\n\r\n  </Form.Group>\r\n  : null}\r\n \r\n <Form.Group as={Row} controlId=\"formPlaintext\">\r\n    <Form.Label column sm=\"2\" >\r\n     Meta Description\r\n    </Form.Label>\r\n    <Col sm=\"10\">\r\n    <FormControl as=\"textarea\" name=\"description\" defaultValue={state.description} aria-label=\"With textarea\" rows=\"8\" placeholder=\"meta description....\" onChange={desOnchange} maxLength=\"150\" />\r\n    <br/>\r\n    {state.description ?<p>Word Count : {state.description.length}</p> : null}\r\n\r\n    </Col>\r\n\r\n  </Form.Group>\r\n \r\n  \r\n \r\n\r\n\r\n\r\n\r\n</Col>\r\n\r\n</Row>\r\n <ListGroup style={{ marginTop: \"15px\" }}>\r\n                            {post_error?\r\n                                post_error.map((err) => (\r\n                                    <ListGroup.Item variant=\"danger\" style={{ borderLeft: \"3px solid #8c0000\" }}>{err.msg}</ListGroup.Item>\r\n                                ))\r\n                                : null\r\n                            }\r\n                        </ListGroup>\r\n                     \r\n\r\n<Col/>\r\n\r\n<br/>\r\n<Row>\r\n<Col>\r\n<Button variant=\"info\" style={{width:'100%'}} type=\"submit\" className=\"justify-content-lg-center\">\r\n  CREATE POST\r\n  </Button>\r\n</Col>\r\n\r\n</Row>\r\n</Form>\r\n\r\n  \r\n  </Card.Body>\r\n</Card>\r\n\r\n\r\n</Col >\r\n\r\n\r\n</Row>\r\n</Container>\r\n<br/><br/>\r\n<Footer/>\r\n            \r\n        </>\r\n    )\r\n}\r\n","D:\\data1\\MERNblog\\frontend\\src\\redux\\reducers\\PostReducer.js",[],"D:\\data1\\MERNblog\\frontend\\src\\redux\\actions\\PostTypes.js",[],"D:\\data1\\MERNblog\\frontend\\src\\redux\\actions\\PostAction.js",[],"D:\\data1\\MERNblog\\frontend\\src\\components\\MyPosts.js",["105","106","107"],"import {Helmet} from 'react-helmet'\r\nimport {useDispatch,useSelector} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom'\r\nimport React, {useEffect,useState} from \"react\";\r\nimport Footer from './Footer';\r\nimport toast,{Toaster} from 'react-hot-toast';\r\nimport {REMOVE_REDIRECT} from '../redux/actions/PostTypes';\r\nimport {myposts,deletepost} from '../redux';\r\nimport { Card,Button,Row,Col} from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrash,faEye } from '@fortawesome/free-solid-svg-icons'\r\nimport moment from 'moment';\r\nimport {Link} from 'react-router-dom';\r\nexport default function Myposts(){\r\n    const {user }=useSelector(state=>state.AuthReducer);\r\n    const {posts}=useSelector(state=>state.PostReducer);\r\n    const {post_success,del_success} =useSelector(state=>state.PostReducer);\r\n    const dispatch = useDispatch();\r\n    \r\n   \r\n    //console.log(\"posts are:\",posts);\r\n    const deleting=(id)=>{\r\n      const confirm=window.confirm('Are you sure you want to delete');\r\n      if(confirm)\r\n      {\r\n            dispatch(deletepost(id));\r\n            dispatch(myposts(user[0]._id));       \r\n      }\r\n    \r\n    }\r\n    const showing=(slug)=>{\r\n        \r\n    }\r\n   \r\n    useEffect(()=>{\r\n\r\n        if(post_success)\r\n        {\r\n            toast.success(post_success) \r\n            dispatch({ type: REMOVE_REDIRECT})\r\n\r\n        }\r\n     \r\n        dispatch(myposts(user[0]._id));\r\n    },[])\r\n    useEffect(()=>{\r\n        if(del_success)\r\n        {\r\n            toast.success(del_success) \r\n            dispatch({ type: REMOVE_REDIRECT})\r\n\r\n        }\r\n\r\n    },[])\r\n  \r\n    return (\r\n        <>\r\n        {user ? null :<Redirect to=\"/\" /> }\r\n        \r\n        \r\n        <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>My Posts</title>\r\n            </Helmet>\r\n            <Toaster /><br/> \r\n            <h1>MY POSTS</h1>\r\n         <Row>\r\n         \r\n            { posts.length>0 ? \r\n                 \r\n               \r\n                 posts.map((post)=>{ \r\n                    return ( \r\n                        <>\r\n                       \r\n                       <Col xl=\"4\" style={{margin:'auto'}}>\r\n                       \r\n                      \r\n                       <Card style={{width:'70%',margin:'auto',height:'100%'}} >\r\n\r\n  <Card.Img variant=\"top\" src={process.env.PUBLIC_URL + `/images/${post.image}` } style={{}} alt=\"mypic\" />\r\n  <Card.Body>\r\n  <span style={{color:'silver'}}>Published {moment(post.updatedAt).fromNow()}</span>\r\n    <Card.Title><h1>{post.title}</h1></Card.Title>\r\n    <hr/>\r\n    <Card.Text>\r\n    <h3>{post.description}</h3>\r\n    </Card.Text>\r\n    <Link to={\"/showpost/\" + post.slug} params={{ slug: post.slug }} style={{textDecoration:'none',color:'inherit'}} ><Button variant=\"info\" onClick={()=>showing(post.slug)}  style={{margin:'20px'}}><FontAwesomeIcon icon={faEye} /> Click To See Post</Button></Link>\r\n\r\n    <Button variant=\"danger\" onClick={()=>deleting(post._id)}> <FontAwesomeIcon icon={faTrash} /> Delete Post</Button>\r\n  </Card.Body>\r\n</Card>\r\n\r\n</Col>\r\n\r\n\r\n           </>            \r\n            )})\r\n\r\n                :<><br/><h3 style={{margin:'auto'}}><i>You don't have posts</i></h3></>\r\n            }\r\n\r\n            </Row>\r\n            \r\n        \r\n           \r\n            <br/><br/>\r\n            <Footer/>\r\n        </>\r\n    )\r\n}\r\n","D:\\data1\\MERNblog\\frontend\\src\\components\\showPost.js",["108","109"],"import React from 'react'\r\nimport {useParams} from \"react-router-dom\";\r\nimport Footer from './Footer'\r\nimport { useEffect} from \"react\";\r\nimport {Helmet} from 'react-helmet'\r\nimport {Card} from 'react-bootstrap'\r\nimport moment from 'moment';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUser} from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport {useSelector,useDispatch} from 'react-redux';\r\nimport {showpost} from '../redux';\r\nexport default function ShowPost() {\r\n    const {showPost} = useSelector(state=>state.PostReducer);\r\n    const {user}=useSelector(state=>state.AuthReducer);\r\n    let { slug } = useParams();\r\n    const dispatch = useDispatch();\r\n    useEffect(()=>{\r\n       dispatch(showpost(slug));\r\n\r\n    },[])\r\n    console.log(\"show post console\",showPost);\r\n\r\n    return (\r\n        <><Helmet>\r\n        <meta charSet=\"utf-8\" />\r\n        <title>Show Post</title>\r\n    </Helmet>\r\n    {showPost.map((post)=>(\r\n        <>\r\n    <Card className=\"text-center\">\r\n  <Card.Header><h4>{post.username } <FontAwesomeIcon icon={faUser} /></h4></Card.Header>\r\n  <Card.Body>\r\n    <Card.Title>{post.title}</Card.Title>\r\n    <Card.Img variant=\"top\" src={process.env.PUBLIC_URL + `/images/${post.image}` } style={{height: '350px',width:'auto'}} alt=\"mypic\" />\r\n\r\n    <Card.Text>\r\n     {post.description}<br/>\r\n     <div className=\"container \"\r\n  dangerouslySetInnerHTML={{\r\n    __html: post.body\r\n  }}></div>\r\n\r\n    </Card.Text>\r\n     \r\n  </Card.Body>\r\n  <Card.Footer className=\"text-muted\">Published {moment(post.updatedAt).fromNow()}</Card.Footer>\r\n</Card>\r\n</>\r\n        ))}\r\n\r\n  <Footer/>\r\n            \r\n        </>\r\n        \r\n    )\r\n}\r\n",{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":6,"column":15,"nodeType":"116","messageId":"117","endLine":6,"endColumn":21},{"ruleId":"114","severity":1,"message":"118","line":8,"column":17,"nodeType":"116","messageId":"117","endLine":8,"endColumn":22},{"ruleId":"114","severity":1,"message":"119","line":12,"column":9,"nodeType":"116","messageId":"117","endLine":12,"endColumn":28},{"ruleId":"114","severity":1,"message":"120","line":63,"column":25,"nodeType":"116","messageId":"117","endLine":63,"endColumn":40},{"ruleId":"121","severity":1,"message":"122","line":75,"column":87,"nodeType":"123","messageId":"124","endLine":75,"endColumn":89},{"ruleId":"125","severity":1,"message":"126","line":84,"column":4,"nodeType":"127","endLine":84,"endColumn":6,"suggestions":"128"},{"ruleId":"125","severity":1,"message":"129","line":92,"column":4,"nodeType":"127","endLine":92,"endColumn":6,"suggestions":"130"},{"ruleId":"125","severity":1,"message":"131","line":39,"column":5,"nodeType":"127","endLine":39,"endColumn":7,"suggestions":"132"},{"ruleId":"114","severity":1,"message":"133","line":1,"column":42,"nodeType":"116","messageId":"117","endLine":1,"endColumn":47},{"ruleId":"114","severity":1,"message":"134","line":12,"column":12,"nodeType":"116","messageId":"117","endLine":12,"endColumn":19},{"ruleId":"135","severity":1,"message":"136","line":209,"column":2,"nodeType":"137","endLine":209,"endColumn":77},{"ruleId":"114","severity":1,"message":"138","line":4,"column":26,"nodeType":"116","messageId":"117","endLine":4,"endColumn":34},{"ruleId":"125","severity":1,"message":"139","line":45,"column":7,"nodeType":"127","endLine":45,"endColumn":9,"suggestions":"140"},{"ruleId":"125","severity":1,"message":"141","line":54,"column":7,"nodeType":"127","endLine":54,"endColumn":9,"suggestions":"142"},{"ruleId":"114","severity":1,"message":"143","line":15,"column":12,"nodeType":"116","messageId":"117","endLine":15,"endColumn":16},{"ruleId":"125","severity":1,"message":"144","line":21,"column":7,"nodeType":"127","endLine":21,"endColumn":9,"suggestions":"145"},"no-native-reassign",["146"],"no-negated-in-lhs",["147"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'faEye' is defined but never used.","'REMOVE_LOGINSUCCESS' is defined but never used.","'setitemsPerPage' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["148"],"React Hook useEffect has missing dependencies: 'dispatch' and 'loginsuccess'. Either include them or remove the dependency array.",["149"],"React Hook useEffect has missing dependencies: 'dispatch' and 'signsuccess'. Either include them or remove the dependency array.",["150"],"'Alert' is defined but never used.","'loading' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'post_success', and 'user'. Either include them or remove the dependency array.",["151"],"React Hook useEffect has missing dependencies: 'del_success' and 'dispatch'. Either include them or remove the dependency array.",["152"],"'user' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'slug'. Either include them or remove the dependency array.",["153"],"no-global-assign","no-unsafe-negation",{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},"Update the dependencies array to be: [dispatch]",{"range":"166","text":"167"},"Update the dependencies array to be: [dispatch, loginsuccess]",{"range":"168","text":"169"},"Update the dependencies array to be: [dispatch, signsuccess]",{"range":"170","text":"171"},"Update the dependencies array to be: [dispatch, post_success, user]",{"range":"172","text":"173"},"Update the dependencies array to be: [del_success, dispatch]",{"range":"174","text":"175"},"Update the dependencies array to be: [dispatch, slug]",{"range":"176","text":"177"},[2487,2489],"[dispatch]",[2628,2630],"[dispatch, loginsuccess]",[1018,1020],"[dispatch, signsuccess]",[1455,1457],"[dispatch, post_success, user]",[1627,1629],"[del_success, dispatch]",[751,753],"[dispatch, slug]"]