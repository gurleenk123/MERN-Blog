{"ast":null,"code":"import axios from 'axios';\nimport { CREATE_POST, POST_ERROR, POST_SUCCESS, GET_POSTS, FETCH_SUCCESS, NOT_FETCHED, START_LOAD, LOADED, DEL_SUCCESS, DEL_ERROR } from './PostTypes.js';\nexport const creating = post => {\n  return function (dispatch, getState) {\n    //const check=getState();\n    //console.log(\"check \",check);\n    const {\n      AuthReducer: {\n        token\n      }\n    } = getState(); //console.log(token);\n\n    dispatch(create());\n    var config = {\n      method: 'post',\n      url: 'http://localhost:5000/post/createpost',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'multipart/form-data'\n      },\n      data: post\n    };\n    axios(config).then(function (response) {\n      console.log(\"response:\", response);\n      dispatch(createdone(response.data.message));\n    }).catch(function (error) {\n      console.log(\"errors are:\", error.response);\n      dispatch(createerror(error.response.data.errors));\n    });\n  };\n};\nexport const myposts = id => {\n  return function (dispatch, getState) {\n    const {\n      AuthReducer: {\n        token\n      }\n    } = getState();\n    dispatch(getting());\n    var config = {\n      method: 'get',\n      url: `http://localhost:5000/post/myposts/${id}`,\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    axios(config).then(function (response) {\n      const {\n        data\n      } = response.data; //console.log(\"response\", data);\n\n      dispatch(fetched(data));\n    }).catch(function (error) {\n      console.log(error);\n      dispatch({\n        type: NOT_FETCHED\n      });\n    });\n  };\n};\nexport const allposts = () => {\n  return function (dispatch) {\n    dispatch({\n      type: START_LOAD\n    });\n    var config = {\n      method: 'get',\n      url: 'http://localhost:5000/post/allposts'\n    };\n    axios(config).then(function (response) {\n      const {\n        resp\n      } = response.data; // console.log(\"response is:\",resp);\n\n      dispatch(loaded(resp));\n    }).catch(function (error) {\n      console.log(error);\n      dispatch({\n        type: NOT_FETCHED\n      });\n    });\n  };\n};\nexport const deletepost = id => {\n  return function (dispatch, getState) {\n    const {\n      AuthReducer: {\n        token\n      }\n    } = getState();\n    dispatch(deleting());\n    var config = {\n      method: 'delete',\n      url: `http://localhost:5000/post/deletepost/${id}`,\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    axios(config).then(function (response) {\n      console.log(response);\n    }).catch(function (error) {\n      console.log(\"errors are:\", error.response); //dispatch(createerror(error.response.data.errors));\n    });\n  };\n};\n\nconst create = () => {\n  return {\n    type: CREATE_POST\n  };\n};\n\nconst createdone = success => {\n  return {\n    type: POST_SUCCESS,\n    payload: success\n  };\n};\n\nconst createerror = error => {\n  return {\n    type: POST_ERROR,\n    payload: error\n  };\n};\n\nconst getting = () => {\n  return {\n    type: GET_POSTS\n  };\n};\n\nconst fetched = posts => {\n  return {\n    type: FETCH_SUCCESS,\n    payload: posts\n  };\n};\n\nconst loaded = posts => {\n  return {\n    type: LOADED,\n    payload: posts\n  };\n};\n\nconst deleting = () => {\n  return {\n    type: DEL_POST\n  };\n};\n\nconst deleted = success => {\n  return {\n    type: DEL_SUCCESS,\n    payload: success\n  };\n};\n\nconst delerror = error => {\n  return {\n    type: DEL_ERROR,\n    payload: error\n  };\n};","map":{"version":3,"sources":["D:/data1/MERNblog/frontend/src/redux/actions/PostAction.js"],"names":["axios","CREATE_POST","POST_ERROR","POST_SUCCESS","GET_POSTS","FETCH_SUCCESS","NOT_FETCHED","START_LOAD","LOADED","DEL_SUCCESS","DEL_ERROR","creating","post","dispatch","getState","AuthReducer","token","create","config","method","url","headers","Authorization","data","then","response","console","log","createdone","message","catch","error","createerror","errors","myposts","id","getting","fetched","type","allposts","resp","loaded","deletepost","deleting","success","payload","posts","DEL_POST","deleted","delerror"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\n\r\nimport {\r\n  CREATE_POST,\r\n  POST_ERROR,\r\n  POST_SUCCESS,\r\n  GET_POSTS,\r\n  FETCH_SUCCESS,\r\n   NOT_FETCHED,\r\n   START_LOAD,\r\n   LOADED,\r\n \r\nDEL_SUCCESS,\r\nDEL_ERROR,\r\n} from './PostTypes.js';\r\n\r\n\r\nexport const creating=(post)=>{\r\n  \r\n      return function (dispatch,getState) {\r\n          //const check=getState();\r\n          //console.log(\"check \",check);\r\n          const {AuthReducer :{ token}}=getState();\r\n          //console.log(token);\r\n          dispatch(create());\r\n          var config = {\r\n            method: 'post',\r\n            url: 'http://localhost:5000/post/createpost',\r\n            headers: { \r\n             Authorization: `Bearer ${token}`,\r\n             'Content-Type': 'multipart/form-data'\r\n             \r\n            },\r\n            data : post\r\n          };\r\n      \r\n          axios(config).then(function (response) { \r\n            console.log(\"response:\",response);\r\n            dispatch(createdone(response.data.message));\r\n          })\r\n         \r\n          .catch(function (error) {\r\n            \r\n            console.log(\"errors are:\",error.response);\r\n           dispatch(createerror(error.response.data.errors));\r\n          });\r\n\r\n\r\n      }\r\n\r\n}\r\n\r\nexport const myposts=(id)=>{\r\n    return function(dispatch,getState) {\r\n     \r\n        const {AuthReducer :{ token}}=getState();\r\n        dispatch(getting());\r\n        var config = {\r\n            method: 'get',\r\n            url: `http://localhost:5000/post/myposts/${id}`,\r\n            headers: { \r\n                Authorization: `Bearer ${token}`,\r\n                \r\n\r\n            }\r\n           \r\n          };\r\n   \r\n          axios(config).then(function (response) {\r\n          const {data }=response.data\r\n            //console.log(\"response\", data);\r\n            dispatch(fetched(data))\r\n          })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n            dispatch({type:NOT_FETCHED})\r\n          });\r\n      \r\n    }\r\n\r\n}\r\n\r\nexport const allposts=()=>{\r\n    return function(dispatch) {\r\n\r\n    dispatch({type:START_LOAD});\r\n    var config = {\r\n        method: 'get',\r\n        url: 'http://localhost:5000/post/allposts',\r\n        \r\n      };\r\n      \r\n      axios(config).then(function (response) {\r\n         const {resp}=response.data\r\n      // console.log(\"response is:\",resp);\r\n        dispatch(loaded(resp));\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        dispatch({type:NOT_FETCHED})\r\n\r\n      });\r\n    }\r\n}\r\nexport const deletepost=(id)=>{\r\n  return function(dispatch,getState) {\r\n     \r\n    const {AuthReducer :{ token}}=getState();\r\n    dispatch(deleting());\r\n    var config = {\r\n        method: 'delete',\r\n        url: `http://localhost:5000/post/deletepost/${id}`,\r\n        headers: { \r\n            Authorization: `Bearer ${token}`,\r\n            \r\n\r\n        }\r\n       \r\n      };\r\n      axios(config).then(function (response) \r\n       {\r\n              console.log(response);\r\n       })\r\n      .catch(function (error) \r\n       {\r\n        console.log(\"errors are:\",error.response);\r\n        //dispatch(createerror(error.response.data.errors));\r\n       });\r\n  }\r\n\r\n}\r\nconst create=()=>{\r\n    return{\r\n    type:CREATE_POST\r\n    }\r\n\r\n}\r\nconst createdone=(success)=>{\r\n    return {\r\n        type:POST_SUCCESS,\r\n        payload: success\r\n    }\r\n  \r\n}\r\nconst createerror=(error)=>{\r\n    return {\r\n        type:POST_ERROR,\r\n        payload: error\r\n    }\r\n\r\n}\r\nconst getting=()=>{\r\n\r\n    return{\r\n        type:GET_POSTS\r\n        }\r\n}\r\nconst fetched=(posts)=>{\r\n    return {\r\n        type:FETCH_SUCCESS,\r\n        payload: posts\r\n\r\n    }\r\n}\r\n\r\nconst loaded=(posts)=>{\r\n    return{\r\n        type:LOADED,\r\n        payload: posts\r\n    }\r\n}\r\nconst deleting=()=>{\r\n\r\n  return{\r\n      type:DEL_POST\r\n      }\r\n}\r\nconst deleted=(success)=>{\r\n  return{\r\n    type:DEL_SUCCESS,\r\n    payload:success\r\n  }\r\n}\r\nconst delerror=(error)=>{\r\n  return{\r\n    type:DEL_ERROR,\r\n    payload:error\r\n  }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}